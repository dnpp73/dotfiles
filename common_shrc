# If not running interactively, don't do anything
[ -z "${PS1}" ] && return

# LANGUAGE, LANG, LC_ALL
# LANGUAGE が一番優先度が低いらしい。LC_xxx は色々なサブタイプがあるが LC_ALL があればそれを見るとかそういう感じ。
if [ -z "${LANGUAGE}" ]; then
    LANGUAGE='ja_JP.UTF-8:en_US.utf8:C.UTF-8:C:POSIX'
    export LANGUAGE
fi
# VSCode devcontainer の Linux のときだけ zsh の補完で文字数がズレる挙動を示すので LANG の設定が必要だと思ったのだけど、それをやったら今度は .zsh_history がまた壊れるようになって辛い。バイナリが出てくることは無くなったけど…。
# LC_ALL でも良いけど、強すぎるので LANG にする。
if [ -z "${LANG}" ]; then
    LANG='C.UTF-8'
    export LANG
fi

# GOPATH
if [ -d "${HOME}/go" ]; then
    GOPATH="${HOME}/go"
    export GOPATH
fi

# Android SDK
if [ -d "${HOME}/Library/Android/sdk" ]; then
    ANDROID_HOME="${HOME}/Library/Android/sdk"
    export ANDROID_HOME
fi

# MANPATH
# 上の方が優先度が低い。ディレクトリがあれば追加していく。
MANPATH=''
MANPATHS=(
    # homebrew Intel
    '/usr/X11/man'
    '/usr/share/man'
    '/usr/local/share/man'
    '/usr/local/opt/mysql-client@8.0/share/man'
    '/usr/local/opt/openjdk/libexec/openjdk.jdk/Contents/Home/man'
    '/usr/local/opt/coreutils/libexec/gnuman'
    '/usr/local/opt/findutils/libexec/gnuman'
    '/usr/local/opt/gnu-sed/libexec/gnuman'
    '/usr/local/opt/gawk/libexec/gnuman'
    '/usr/local/opt/gnu-tar/libexec/gnuman'
    '/usr/local/opt/grep/libexec/gnuman'

    # homebrew Apple M1
    '/opt/homebrew/share/man'
    '/opt/homebrew/opt/mysql-client@8.0/share/man'
    '/opt/homebrew/opt/openjdk/libexec/openjdk.jdk/Contents/Home/man'
    '/opt/homebrew/opt/coreutils/libexec/gnuman'
    '/opt/homebrew/opt/findutils/libexec/gnuman'
    '/opt/homebrew/opt/gnu-sed/libexec/gnuman'
    '/opt/homebrew/opt/gawk/libexec/gnuman'
    '/opt/homebrew/opt/gnu-tar/libexec/gnuman'
    '/opt/homebrew/opt/grep/libexec/gnuman'
)
for m in "${MANPATHS[@]}"; do
    [ -d "${m}" ] && MANPATH="${m}:${MANPATH}"
done
# shellcheck disable=SC2001
MANPATH=$(echo "${MANPATH}" | sed -e 's/:$//')
export MANPATH

# PATH
# 上の方が優先度が低い。ディレクトリがあれば追加していく。
NEW_PATH=''
PATHS=(
    '/usr/games'
    '/usr/bin/X11'
    '/usr/X11/bin'
    '/sbin'
    '/bin'
    '/usr/sbin'
    '/usr/bin'
    '/snap/bin'

    # cuda
    /usr/local/cuda/bin

    # homebrew Intel
    '/usr/local/opt/openjdk/libexec/openjdk.jdk/Contents/Home/bin'
    '/usr/local/opt/ncurses/bin'
    '/usr/local/opt/tcl-tk/bin'
    '/usr/local/opt/sqlite/bin'
    '/usr/local/opt/mysql-client/bin'
    '/usr/local/opt/mysql@5.7/bin'
    '/usr/local/opt/mysql-client@8.0/bin'
    '/usr/local/opt/bison/bin'
    '/usr/local/opt/gettext/bin'
    '/usr/local/opt/icu4c/bin'
    '/usr/local/opt/icu4c/sbin'
    '/usr/local/opt/gnu-getopt/bin'
    '/usr/local/opt/openssl/bin'
    '/usr/local/opt/openssl@1.1/bin'
    # '/usr/local/opt/binutils/bin' # /usr/bin 以下のものを優先的に使いたいことの方が多かった…。 rbenv でビルドが毎回コケる。
    '/usr/local/opt/findutils/libexec/gnubin'
    '/usr/local/opt/coreutils/libexec/gnubin'
    '/usr/local/opt/gnu-sed/libexec/gnubin'
    '/usr/local/opt/gawk/libexec/gnubin'
    '/usr/local/opt/gnu-tar/libexec/gnubin'
    '/usr/local/opt/grep/libexec/gnubin'
    '/usr/local/sbin'
    '/usr/local/bin'
    '/usr/local/go/bin'

    # homebrew Apple M1
    '/opt/homebrew/opt/openjdk/libexec/openjdk.jdk/Contents/Home/bin'
    '/opt/homebrew/opt/ncurses/bin'
    '/opt/homebrew/opt/tcl-tk/bin'
    '/opt/homebrew/opt/sqlite/bin'
    '/opt/homebrew/opt/mysql-client/bin'
    '/opt/homebrew/opt/mysql@5.7/bin'
    '/opt/homebrew/opt/mysql-client@8.0/bin'
    '/opt/homebrew/opt/bison/bin'
    '/opt/homebrew/opt/gettext/bin'
    '/opt/homebrew/opt/icu4c/bin'
    '/opt/homebrew/opt/icu4c/sbin'
    '/opt/homebrew/opt/gnu-getopt/bin'
    '/opt/homebrew/opt/openssl/bin'
    '/opt/homebrew/opt/openssl@1.1/bin'
    # '/opt/homebrew/opt/binutils/bin' # /usr/bin 以下のものを優先的に使いたいことの方が多かった…。 rbenv でビルドが毎回コケる。
    '/opt/homebrew/opt/findutils/libexec/gnubin'
    '/opt/homebrew/opt/coreutils/libexec/gnubin'
    '/opt/homebrew/opt/gnu-sed/libexec/gnubin'
    '/opt/homebrew/opt/gawk/libexec/gnubin'
    '/opt/homebrew/opt/gnu-tar/libexec/gnubin'
    '/opt/homebrew/opt/grep/libexec/gnubin'
    '/opt/homebrew/sbin'
    '/opt/homebrew/bin'

    # Docker Ruby Global bundle gems
    /usr/local/bundle/bin

    # Android SDK
    "${HOME}/Library/Android/sdk/tools"                    # $ANDROID_HOME/tools
    "${HOME}/Library/Android/sdk/tools/bin"                # $ANDROID_HOME/tools/bin
    "${HOME}/Library/Android/sdk/platform-tools"           # $ANDROID_HOME/platform-tools
    "${HOME}/Library/Android/sdk/cmdline-tools/latest/bin" # $ANDROID_HOME/cmdline-tools/latest/bin

    # fvm (flutter)
    "${HOME}/.pub-cache/bin"
    "${HOME}/fvm/default/bin"

    # go
    "${HOME}/go/bin" # $GOPATH/bin だと GOPATH が無かったときに /bin になるため。

    # anyenv
    "${HOME}/.goenv/bin"
    "${HOME}/.nodenv/bin"
    "${HOME}/.pyenv/bin"
    "${HOME}/.rbenv/bin"

    # Personal
    "${HOME}/sbin"
    "${HOME}/bin"

    # LM Studio CLI (lms)
    "${HOME}/.cache/lm-studio/bin"
)
for p in "${PATHS[@]}"; do
    [ -d "${p}" ] && NEW_PATH="${p}:${NEW_PATH}"
done
# shellcheck disable=SC2001
PATH=$(echo "${NEW_PATH}" | sed -e 's/:$//')
export PATH

# JAVA_HOME
if [ -n "${JAVA_HOME}" ] && [ -d "${JAVA_HOME}" ]; then
    java_home="${JAVA_HOME}"
elif [ -d '/usr/local/opt/openjdk/libexec/openjdk.jdk/Contents/Home' ]; then
    java_home='/usr/local/opt/openjdk/libexec/openjdk.jdk/Contents/Home'
elif [ -d '/opt/homebrew/opt/openjdk/libexec/openjdk.jdk/Contents/Home' ]; then
    java_home='/opt/homebrew/opt/openjdk/libexec/openjdk.jdk/Contents/Home'
fi
if [ -n "${java_home}" ]; then
    export JAVA_HOME="${java_home}"
fi

# LDFLAGS
# 上の方が優先度が低い。ディレクトリがあれば追加していく。
LDFLAGS=''
LDFLAGS_LIST=(
    # homebrew Intel
    '/usr/local/opt/readline/lib'
    '/usr/local/opt/libffi/lib'
    '/usr/local/opt/openssl@1.1/lib'
    '/usr/local/opt/openssl@3/lib'
    '/usr/local/opt/mysql@5.7/lib'
    '/usr/local/opt/mysql-client@8.0/lib'
    '/usr/local/opt/sqlite/lib'
    '/usr/local/opt/icu4c/lib'
    '/usr/local/opt/ncurses/lib'
    '/usr/local/opt/tcl-tk/lib'
    '/usr/local/opt/tcl-tk@8/lib'
    '/usr/local/opt/binutils/lib'
    '/usr/local/opt/zlib/lib'
    '/usr/local/opt/bzip2/lib'

    # homebrew Apple M1
    '/opt/homebrew/opt/readline/lib'
    '/opt/homebrew/opt/libffi/lib'
    '/opt/homebrew/opt/openssl@1.1/lib'
    '/opt/homebrew/opt/openssl@3/lib'
    '/opt/homebrew/opt/mysql@5.7/lib'
    '/opt/homebrew/opt/mysql-client@8.0/lib'
    '/opt/homebrew/opt/sqlite/lib'
    '/opt/homebrew/opt/icu4c/lib'
    '/opt/homebrew/opt/ncurses/lib'
    '/opt/homebrew/opt/tcl-tk/lib'
    '/opt/homebrew/opt/tcl-tk@8/lib'
    '/opt/homebrew/opt/binutils/lib'
    '/opt/homebrew/opt/zlib/lib'
    '/opt/homebrew/opt/bzip2/lib'
)
for l in "${LDFLAGS_LIST[@]}"; do
    [ -d "${l}" ] && LDFLAGS="-L${l} ${LDFLAGS}"
done
# shellcheck disable=SC2001
LDFLAGS=$(echo "${LDFLAGS}" | sed -e 's/ $//')
export LDFLAGS

# INCLUDES
# 上の方が優先度が低い。ディレクトリがあれば追加していく。
INCLUDES=''
INCLUDE_LIST=(
    # homebrew Intel
    '/usr/local/opt/readline/include'
    '/usr/local/opt/libffi/include'
    '/usr/local/opt/openssl@1.1/include'
    '/usr/local/opt/openssl@3/include'
    '/usr/local/opt/mysql@5.7/include'
    '/usr/local/opt/mysql-client@8.0/include'
    '/usr/local/opt/sqlite/include'
    '/usr/local/opt/icu4c/include'
    '/usr/local/opt/ncurses/include'
    '/usr/local/opt/tcl-tk/include'
    '/usr/local/opt/tcl-tk@8/include'
    '/usr/local/opt/binutils/include'
    '/usr/local/opt/zlib/include'
    '/usr/local/opt/bzip2/include'

    # homebrew Apple M1
    '/opt/homebrew/opt/readline/include'
    '/opt/homebrew/opt/libffi/include'
    '/opt/homebrew/opt/openssl@1.1/include'
    '/opt/homebrew/opt/openssl@3/include'
    '/opt/homebrew/opt/mysql@5.7/include'
    '/opt/homebrew/opt/mysql-client@8.0/include'
    '/opt/homebrew/opt/sqlite/include'
    '/opt/homebrew/opt/icu4c/include'
    '/opt/homebrew/opt/ncurses/include'
    '/opt/homebrew/opt/tcl-tk/include'
    '/opt/homebrew/opt/tcl-tk@8/include'
    '/opt/homebrew/opt/binutils/include'
    '/opt/homebrew//opt/zlib/include'
    '/opt/homebrew//opt/bzip2/include'
)
for c in "${INCLUDE_LIST[@]}"; do
    [ -d "${c}" ] && INCLUDES="-I${c} ${INCLUDES}"
done
# shellcheck disable=SC2001
INCLUDES=$(echo "${INCLUDES}" | sed -e 's/ $//')

CPPFLAGS="${INCLUDES}"
export CPPFLAGS

CFLAGS="${INCLUDES}"
export CFLAGS

CXXFLAGS="${INCLUDES}"
export CXXFLAGS

# PKG_CONFIG_PATH
# 上の方が優先度が低い。ディレクトリがあれば追加していく。
PKG_CONFIG_PATH=''
PKG_CONFIG_PATHS=(
    # homebrew Intel
    '/usr/local/opt/libffi/lib/pkgconfig'
    '/usr/local/opt/openssl@1.1/lib/pkgconfig'
    '/usr/local/opt/openssl@3/lib/pkgconfig'
    '/usr/local/opt/mysql@5.7/lib/pkgconfig'
    '/usr/local/opt/mysql-client@8.0/lib/pkgconfig'
    '/usr/local/opt/sqlite/lib/pkgconfig'
    '/usr/local/opt/icu4c/lib/pkgconfig'

    # homebrew Apple M1
    '/opt/homebrew/opt/libffi/lib/pkgconfig'
    '/opt/homebrew/opt/openssl@1.1/lib/pkgconfig'
    '/opt/homebrew/opt/openssl@3/lib/pkgconfig'
    '/opt/homebrew/opt/mysql@5.7/lib/pkgconfig'
    '/opt/homebrew/opt/mysql-client@8.0/lib/pkgconfig'
    '/opt/homebrew/opt/sqlite/lib/pkgconfig'
    '/opt/homebrew/opt/icu4c/lib/pkgconfig'
)
for p in "${PKG_CONFIG_PATHS[@]}"; do
    [ -d "${p}" ] && PKG_CONFIG_PATH="${p}:${PKG_CONFIG_PATH}"
done
# shellcheck disable=SC2001
PKG_CONFIG_PATH=$(echo "${PKG_CONFIG_PATH}" | sed -e 's/:$//')
export PKG_CONFIG_PATH

# LD_LIBRARY_PATH
# 上の方が優先度が低い。ディレクトリがあれば追加していく。
LD_LIBRARY_PATH=''
LD_LIBRARY_PATHS=(
    '/usr/local/cuda/lib64'
)
for p in "${LD_LIBRARY_PATHS[@]}"; do
    [ -d "${p}" ] && LD_LIBRARY_PATH="${p}:${LD_LIBRARY_PATH}"
done
# shellcheck disable=SC2001
LD_LIBRARY_PATH=$(echo "${LD_LIBRARY_PATH}" | sed -e 's/:$//')
export LD_LIBRARY_PATH

# EDITOR
EDITOR=$(which vim)
VIM_EXIST=$?
if [ "${VIM_EXIST}" -eq 0 ]; then
    export EDITOR
fi

# PAGER
# man とかを見るときはいつも less を使う。
PAGER=$(which less)
LESS_EXIST=$?
if [ "${LESS_EXIST}" -eq 0 ]; then
    export PAGER
fi

# less
# ステータス行にファイル名と行数、いま何%かを表示するようにする。
# -N or --LINE-NUMBERS は行番号を表示する。
# -R --RAW-CONTROL-CHARS は ANSI カラーエスケープシーケンスを解釈。 -r or --raw-control-chars もあるけど、これは使うなって書いてある。
# -F はファイルが1画面に収まる場合は自動的に終了する。
# -X --no-init はターミナルの初期化と終了時にクリアしない。
# -i --ignore-case は検索時に大文字小文字を区別しない。
# -m --long-prompt もある。
# -M --LONG-PROMPT は -m より詳細なステータス行にファイル名と行数、いま何%かを表示するようにする。
# -S --chop-long-lines は長い行を折り返さずに表示する。
# -P -P prompt or --prompt=prompt  '-P ?f%f:(stdin).  ?lb%lb?L/%L..  [?eEOF:?pb%pb\%..]' の指定をしてた。
export LESS='--mouse --RAW-CONTROL-CHARS --no-init --ignore-case --chop-long-lines --LONG-PROMPT --prompt=?f%f:(stdin).  ?lb%lb?L/%L..  [?eEOF:?pb%pb\%..]'

SRC_HILITE_LESSPIPE_SH=$(which src-hilite-lesspipe.sh)
SRC_HILITE_LESSPIPE_EXIST=$?
if [ "${SRC_HILITE_LESSPIPE_EXIST}" -eq 0 ]; then
    export LESSOPEN="| ${SRC_HILITE_LESSPIPE_SH} %s"
fi

# これを設定しないと日本語がでない less もあるので一応入れておく。
export JLESSCHARSET='japanese-ujis'

# MAN を bat でオシャレに見る。
if which bat >/dev/null 2>&1; then
    export MANPAGER="sh -c 'col -bx | bat -l man -p'"
elif which batcat >/dev/null 2>&1; then
    export MANPAGER="sh -c 'col -bx | batcat -l man -p'"
fi

# # AWS
# if [ -z "${AWS_DEFAULT_PROFILE}" ]; then
#     export AWS_DEFAULT_PROFILE='dnpp-org'
# fi

# rbenv で openssl を自前で持たないようにさせたい。
# openssl ビルド時に binutils が BSD であることが前提のコードが入っているため
# `export PATH=$(printenv PATH | tr ':' '\n' | grep -v binutils | tr '\n' ':' | sed -e 's/:$//')`
# などして逃げる必要が出てきてしまう。
# brew --prefix は遅いらしいので直に書く。
if which brew >/dev/null 2>&1; then
    if uname -m | grep 'x86_64' >/dev/null 2>&1; then
        # export RUBY_CONFIGURE_OPTS="--with-openssl-dir=/usr/local/opt/openssl@1.1 --with-readline-dir=/usr/local"
        export RUBY_CONFIGURE_OPTS="--with-openssl-dir=/usr/local/opt/openssl@3 --with-readline-dir=/usr/local"
    elif uname -m | grep 'arm64' >/dev/null 2>&1; then
        # export RUBY_CONFIGURE_OPTS="--with-openssl-dir=/opt/homebrew/opt/openssl@1.1 --with-readline-dir=/opt/homebrew"
        export RUBY_CONFIGURE_OPTS="--with-openssl-dir=/opt/homebrew/opt/openssl@3 --with-readline-dir=/opt/homebrew"
        export RUBY_CFLAGS='-DUSE_FFI_CLOSURE_ALLOC'
    fi
fi

# Homebrew https://docs.brew.sh/Manpage#environment
export HOMEBREW_BAT='1'
export HOMEBREW_NO_ANALYTICS='1'
export HOMEBREW_NO_AUTO_UPDATE='1'
export HOMEBREW_NO_ENV_HINTS='1'
export HOMEBREW_NO_INSTALL_CLEANUP='1'
export HOMEBREW_NO_INSTALL_UPGRADE='1'

# for Swift mint
if which mint >/dev/null 2>&1; then
    export MINT_PATH="${HOME}/.mint/lib"
    export MINT_LINK_PATH="${HOME}/.mint/bin"
    mkdir -p "${MINT_PATH}"
    mkdir -p "${MINT_LINK_PATH}"
fi

# Python
export PIP_DISABLE_PIP_VERSION_CHECK='1'
export PYTHONDONTWRITEBYTECODE='1'
export PYTHONUTF8='1'
export PYTHONIOENCODING='UTF-8'
export VIRTUAL_ENV_DISABLE_PROMPT='1'

# Histroy Files
export HISTRY_DIRECTORY="${HOME}/.history.d"
mkdir -p "${HISTRY_DIRECTORY}"
export NODE_REPL_HISTORY="${HISTRY_DIRECTORY}/node_history"
export SQLITE_HISTORY="${HISTRY_DIRECTORY}/sqlite_history"
export MYSQL_HISTFILE="${HISTRY_DIRECTORY}/mysql_history"
export PSQL_HISTORY="${HISTRY_DIRECTORY}/psql_history"
export PRY_HISTORY_PATH="${HISTRY_DIRECTORY}/pry_history" # pryrc と併用している。標準で用意されている仕組みではない。
export IRB_HISTORY_PATH="${HISTRY_DIRECTORY}/irb_history" # irbrc と併用している。標準で用意されている仕組みではない。
# export PYTHON_HISTFILE="${HISTRY_DIRECTORY}/python_history" # やるなら $PYTHONSTARTUP に pythonrc みたいなのを指定して実装する必要がある。標準で用意されている仕組みではない。
