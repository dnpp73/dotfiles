# コマンドの省略形の対応表
# set    == set-option
# setw   == set-window-option
# bind   == bind-key
# unbind == unbind-key

#
# マウスとクリップボードの設定
#
set  -g mouse on
setw -g alternate-screen on
set  -g set-clipboard on

# マウスドラッグ終了時の挙動を「自動コピーして copy-mode 終了」ではなく「テキスト選択して copy-mode 続行」に変える
# 読みにくいけど bind-key -T で "copy-mode-vi キーテーブル" を指定して、
# なんらかのキー (MouseDragEnd1Pane とか y キーとか) を指定して、
# 最後に send-keys -X は tmux の内部アクションをトリガする。
# send-keys -X copy-pipe は copy-mode で選択したテキストをパイプに流すアクション。
# copy-pipe-no-clear や copy-pipe-and-cancel などもある。
unbind   -T copy-mode    MouseDragEnd1Pane
unbind   -T copy-mode-vi MouseDragEnd1Pane
bind-key -T copy-mode    MouseDragEnd1Pane display-message "Press Y to Copied to clipboard"
bind-key -T copy-mode-vi MouseDragEnd1Pane display-message "Press Y to Copied to clipboard"
bind-key -T copy-mode    y send-keys -X copy-pipe-no-clear "~/environments/dotfiles/osc52copy.sh"
bind-key -T copy-mode-vi y send-keys -X copy-pipe-no-clear "~/environments/dotfiles/osc52copy.sh"

#
# キーバインドの設定
# 手癖でやってしまうので screen 風にする。
#
unbind C-b
set -g prefix C-a

unbind C-o    # rotate-window
unbind f      # command-prompt "find-window '%%'"
unbind l      # last-window
unbind m      # select-pane -m
unbind o      # select-pane -t :.+
unbind s      # choose-tree
unbind t      # clock-mode
unbind z      # resize-pane -Z
unbind \{     # swap-pane -U
unbind \}     # swap-pane -D
unbind \;     # last-pane
unbind =      # choose-buffer

bind a   send-prefix
bind C-a send-prefix

bind c   new-window
bind C-c new-window

bind n   next-window
bind C-n next-window

bind p   previous-window
bind C-p previous-window

bind w   choose-window
bind C-w choose-window

bind d   detach-client
bind C-d detach-client

# | でペインを縦に分割する。 | は入力的には Shft + \ なので \ でも反応させたい。 C-a -> C-\ で Control を押しっぱなしでもいいようにしている。
bind |    split-window -h -c "#{pane_current_path}"
bind \\   split-window -h -c "#{pane_current_path}"
bind C-\\ split-window -h -c "#{pane_current_path}"

# - でペインを横に分割する。 C-- という設定ができないので、 Control を押しっぱなしで横分割ができない…。
bind -   split-window -v -c "#{pane_current_path}"

#
# ステータスバーの設定
#
setw -g monitor-activity on
set  -g visual-activity  off

setw -g automatic-rename on

set  -g set-titles on
set  -g set-titles-string "#W"

set  -g base-index      0 # ウィンドウのインデックスを1から始めるときに 1 にする
setw -g pane-base-index 0 # ペインのインデックスを1から始めるときに 1 にする

set -g status-position bottom
set -g status-fg black
set -g status-bg white

set -g status-interval 5 # Default is 15

set -g status-left-length 1
set -g status-left " "

set -g status-right-length 999
# 昔、凝っていた時にこういうのを書いていたというのを残しておく。
# set -g status-right "#[bg=colour250,fg=black] CPU #(cpu-usage) | Mem #(mem-usage -f) | Net #(network-band) #(ssid) | 🔋️ #(battery) #[fg=black]| #[bold,fg=colour20]%y/%m/%d #[fg=colour160]%H:%M:%S "
# set -g status-right "#[bg=colour250,fg=black] 🔋️ #(battery) #[fg=black]| #[bold,fg=colour20]%y/%m/%d #[fg=colour160]%H:%M "
set -g status-right "#[bg=colour250,fg=black]#(~/environments/dotfiles/tmux-status-right-stats.sh)"

# ウィンドウのステータスラインのデフォルトの表示
setw -g window-status-style fg=colour20,bg=white
setw -g window-status-format " #W "

# アクティブなウィンドウのステータスラインの表示
setw -g window-status-current-style fg=colour196,bg=black
setw -g window-status-current-format " #W "

setw -g mode-keys vi
bind [   copy-mode
bind C-[ copy-mode
bind ]   paste-buffer -p
bind C-] paste-buffer -p
# bind -t vi-copy Escape cancel
