# If not running interactively, don't do anything
[ -z "$PS1" ] && return

AGENT_SOCK_FILE="/tmp/ssh-agent-${USER}@`hostname`"
SSH_AGENT_FILE="/tmp/ssh-agent-info-${USER}-`date|md5sum|cut -d ' ' -f1`"

printenv SSH_AUTH_SOCK > /dev/null 2>&1
if [ $? -eq 0 ]; then
    # 環境変数 SSH_AUTH_SOCK がある場合
    if [ $SSH_AUTH_SOCK != $AGENT_SOCK_FILE ]; then
        # 毎回変わるタイプのソケットだったらシンボリックリンクを張ってそっちに向ける。
        ln -sf $SSH_AUTH_SOCK $AGENT_SOCK_FILE
        export SSH_AUTH_SOCK=$AGENT_SOCK_FILE
    fi
else
    # 環境変数 SSH_AUTH_SOCK が無い場合

    if [ -S $AGENT_SOCK_FILE ]; then
        # ソケットっぽい感じならそれを export しちゃう
        export SSH_AUTH_SOCK=$AGENT_SOCK_FILE
    else
        # ssh-agent を起動して /tmp 以下にとりあえず情報を保持して source で読み込む
        ssh-agent > $SSH_AGENT_FILE
        source $SSH_AGENT_FILE > /dev/null 2>&1

        # んで、 SSH_AUTH_SOCK をシンボリックリンクにして、そっちに向ける
        ln -sf $SSH_AUTH_SOCK $AGENT_SOCK_FILE
        export SSH_AUTH_SOCK=$AGENT_SOCK_FILE
    fi
fi

KEY_FILES=("id_rsa" "id_rsa_aws" "id_rsa_IB" "id_rsa_beatrobo" "id_rsa_aws" "id_rsa_gcp")

# 鍵を足して終わり
if pgrep ssh-agent > /dev/null 2>&1; then
    for key in ${KEY_FILES[@]}; do
        KEY_FULL_PATH="${HOME}/.ssh/${key}"
        if [ -f "${KEY_FULL_PATH}" ]; then
            if [ `uname` = "Darwin" ]; then
                ssh-add -K "${KEY_FULL_PATH}" > /dev/null 2>&1
            else
                ssh-add "${KEY_FULL_PATH}" > /dev/null 2>&1
            fi
        fi
    done
fi

unset AGENT_SOCK_FILE SSH_AGENT_FILE KEY_FILES
